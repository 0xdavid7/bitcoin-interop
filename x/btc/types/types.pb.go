// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/btc/v1beta1/types.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BTCEvent_Status int32

const (
	BTCEvent_STATUS_UNSPECIFIED BTCEvent_Status = 0
	BTCEvent_STATUS_PENDING     BTCEvent_Status = 1
	BTCEvent_STATUS_CONFIRMED   BTCEvent_Status = 2
	BTCEvent_STATUS_FAILED      BTCEvent_Status = 3
)

var BTCEvent_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PENDING",
	2: "STATUS_CONFIRMED",
	3: "STATUS_FAILED",
}

var BTCEvent_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_PENDING":     1,
	"STATUS_CONFIRMED":   2,
	"STATUS_FAILED":      3,
}

func (x BTCEvent_Status) String() string {
	return proto.EnumName(BTCEvent_Status_name, int32(x))
}

func (BTCEvent_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c7ea41f07517fc76, []int{1, 0}
}

type BTCTransaction struct {
	TxHash             string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	BlockHeight        uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Sender             string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient          string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount             string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	ConfirmationHeight uint64 `protobuf:"varint,6,opt,name=confirmation_height,json=confirmationHeight,proto3" json:"confirmation_height,omitempty"`
}

func (m *BTCTransaction) Reset()         { *m = BTCTransaction{} }
func (m *BTCTransaction) String() string { return proto.CompactTextString(m) }
func (*BTCTransaction) ProtoMessage()    {}
func (*BTCTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7ea41f07517fc76, []int{0}
}
func (m *BTCTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCTransaction.Merge(m, src)
}
func (m *BTCTransaction) XXX_Size() int {
	return m.Size()
}
func (m *BTCTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_BTCTransaction proto.InternalMessageInfo

func (m *BTCTransaction) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *BTCTransaction) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BTCTransaction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *BTCTransaction) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *BTCTransaction) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *BTCTransaction) GetConfirmationHeight() uint64 {
	if m != nil {
		return m.ConfirmationHeight
	}
	return 0
}

type BTCEvent struct {
	TxHash        string          `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Status        BTCEvent_Status `protobuf:"varint,2,opt,name=status,proto3,enum=axelar.btc.v1beta1.BTCEvent_Status" json:"status,omitempty"`
	CreatedHeight uint64          `protobuf:"varint,3,opt,name=created_height,json=createdHeight,proto3" json:"created_height,omitempty"`
}

func (m *BTCEvent) Reset()         { *m = BTCEvent{} }
func (m *BTCEvent) String() string { return proto.CompactTextString(m) }
func (*BTCEvent) ProtoMessage()    {}
func (*BTCEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7ea41f07517fc76, []int{1}
}
func (m *BTCEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCEvent.Merge(m, src)
}
func (m *BTCEvent) XXX_Size() int {
	return m.Size()
}
func (m *BTCEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BTCEvent proto.InternalMessageInfo

func (m *BTCEvent) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *BTCEvent) GetStatus() BTCEvent_Status {
	if m != nil {
		return m.Status
	}
	return BTCEvent_STATUS_UNSPECIFIED
}

func (m *BTCEvent) GetCreatedHeight() uint64 {
	if m != nil {
		return m.CreatedHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("axelar.btc.v1beta1.BTCEvent_Status", BTCEvent_Status_name, BTCEvent_Status_value)
	proto.RegisterType((*BTCTransaction)(nil), "axelar.btc.v1beta1.BTCTransaction")
	proto.RegisterType((*BTCEvent)(nil), "axelar.btc.v1beta1.BTCEvent")
}

func init() { proto.RegisterFile("axelar/btc/v1beta1/types.proto", fileDescriptor_c7ea41f07517fc76) }

var fileDescriptor_c7ea41f07517fc76 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0x75, 0x04, 0x66, 0x58, 0x14, 0x0c, 0x1a, 0x39, 0xa0, 0x68, 0x0c, 0x21, 0xed,
	0x42, 0xc2, 0xe0, 0xc8, 0x69, 0x4d, 0x52, 0x16, 0x04, 0x61, 0x4a, 0xb2, 0x0b, 0x12, 0xaa, 0x1c,
	0xcf, 0x2c, 0xd1, 0xda, 0xb8, 0x72, 0x5e, 0x4b, 0xf8, 0x16, 0x7c, 0x2c, 0x24, 0x2e, 0x3d, 0x72,
	0x44, 0xad, 0xc4, 0xe7, 0x40, 0xb5, 0x5d, 0x81, 0x84, 0x76, 0x7c, 0xbf, 0xbf, 0xff, 0xef, 0xfd,
	0x9f, 0xf5, 0xb0, 0x4f, 0x7b, 0x3e, 0xa1, 0x32, 0xac, 0x80, 0x85, 0x8b, 0x93, 0x8a, 0x03, 0x3d,
	0x09, 0xe1, 0xeb, 0x8c, 0x77, 0xc1, 0x4c, 0x0a, 0x10, 0x84, 0x68, 0x3d, 0xa8, 0x80, 0x05, 0x46,
	0x3f, 0xfa, 0x81, 0xb0, 0x33, 0x2c, 0xa3, 0x52, 0xd2, 0xb6, 0xa3, 0x0c, 0x1a, 0xd1, 0x92, 0x47,
	0xf8, 0x36, 0xf4, 0xe3, 0x9a, 0x76, 0xb5, 0x87, 0x0e, 0xd1, 0xf1, 0x5e, 0x6e, 0x43, 0x7f, 0x46,
	0xbb, 0x9a, 0x3c, 0xc1, 0xf7, 0xaa, 0x89, 0x60, 0xd7, 0xe3, 0x9a, 0x37, 0x57, 0x35, 0x78, 0x3b,
	0x87, 0xe8, 0x78, 0x37, 0xbf, 0xab, 0xd8, 0x99, 0x42, 0xe4, 0x00, 0xdb, 0x1d, 0x6f, 0x2f, 0xb9,
	0xf4, 0x06, 0xda, 0xaa, 0x2b, 0xf2, 0x18, 0xef, 0x49, 0xce, 0x9a, 0x59, 0xc3, 0x5b, 0xf0, 0x76,
	0x95, 0xf4, 0x17, 0x6c, 0x5c, 0x74, 0x2a, 0xe6, 0x2d, 0x78, 0xb7, 0xb4, 0x4b, 0x57, 0x24, 0xc4,
	0x0f, 0x98, 0x68, 0x3f, 0x37, 0x72, 0x4a, 0x37, 0xc9, 0xb6, 0x73, 0x6d, 0x35, 0x97, 0xfc, 0x2b,
	0xe9, 0xf1, 0x47, 0xbf, 0x11, 0xbe, 0x33, 0x2c, 0xa3, 0x64, 0xb1, 0xe9, 0x7a, 0xe3, 0x1e, 0xaf,
	0xb1, 0xdd, 0x01, 0x85, 0x79, 0xa7, 0x36, 0x70, 0x5e, 0x3e, 0x0d, 0xfe, 0xff, 0x98, 0x60, 0xdb,
	0x26, 0x28, 0xd4, 0xd3, 0xdc, 0x58, 0xc8, 0x33, 0xec, 0x30, 0xc9, 0x29, 0xf0, 0xcb, 0x6d, 0x9c,
	0x81, 0x8a, 0xb3, 0x6f, 0xa8, 0x49, 0xf2, 0x09, 0xdb, 0xda, 0x48, 0x0e, 0x30, 0x29, 0xca, 0xd3,
	0xf2, 0xa2, 0x18, 0x5f, 0x64, 0xc5, 0x79, 0x12, 0xa5, 0xa3, 0x34, 0x89, 0x5d, 0x8b, 0x10, 0xec,
	0x18, 0x7e, 0x9e, 0x64, 0x71, 0x9a, 0xbd, 0x71, 0x11, 0x79, 0x88, 0x5d, 0xc3, 0xa2, 0x0f, 0xd9,
	0x28, 0xcd, 0xdf, 0x27, 0xb1, 0xbb, 0x43, 0xee, 0xe3, 0x7d, 0x43, 0x47, 0xa7, 0xe9, 0xbb, 0x24,
	0x76, 0x07, 0xc3, 0xb7, 0xdf, 0x57, 0x3e, 0x5a, 0xae, 0x7c, 0xf4, 0x6b, 0xe5, 0xa3, 0x6f, 0x6b,
	0xdf, 0x5a, 0xae, 0x7d, 0xeb, 0xe7, 0xda, 0xb7, 0x3e, 0xbe, 0xb8, 0x6a, 0xa0, 0x9e, 0x57, 0x01,
	0x13, 0xd3, 0x50, 0xaf, 0xd5, 0x72, 0xf8, 0x22, 0xe4, 0xb5, 0xa9, 0x9e, 0x33, 0x21, 0x79, 0xd8,
	0xab, 0x23, 0x51, 0xc7, 0x51, 0xd9, 0xea, 0x3a, 0x5e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0x63, 0x6b, 0x04, 0x3f, 0x02, 0x00, 0x00,
}

func (m *BTCTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfirmationHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConfirmationHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreatedHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BTCTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.BlockHeight))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConfirmationHeight != 0 {
		n += 1 + sovTypes(uint64(m.ConfirmationHeight))
	}
	return n
}

func (m *BTCEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.CreatedHeight != 0 {
		n += 1 + sovTypes(uint64(m.CreatedHeight))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BTCTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationHeight", wireType)
			}
			m.ConfirmationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BTCEvent_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedHeight", wireType)
			}
			m.CreatedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
